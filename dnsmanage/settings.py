"""
Django settings for dnsmanage project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os,ConfigParser

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
config = ConfigParser.ConfigParser()
config.read(os.path.join(BASE_DIR, 'config.ini'))
db_host = config.get('db', 'host')
db_port = config.get('db', 'port')
db_name = config.get('db', 'dbname')
db_user = config.get('db', 'user')
db_password = config.get('db', 'password')

qcloud_secretId = config.get('qcloud','secretId')
qcloud_secretKey = config.get('qcloud','secretKey')

upyun_token = config.get('upyun','acceccs_token')

dnspod_login_token = config.get('dnspod','login_token')

#email configure
email_host = config.get('email','email_host')
email_port = ('email','email_port')
email_user = ('email','email_user')
email_password = ('email','email_password')
email_use_tls = ('email','email_use_tls')
email_push = ('email','email_push')



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'q833qjvphiql6(zoc*1=gbv)^7_5w570!xndy9u5w76j%g$0ot'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'accounts',
    'dnspod',
    'Log',
    'django_crontab',
    'dnsmanage',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dnsmanage.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dnsmanage.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    }
#}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': db_name,
        'USER': db_user,
        'PASSWORD': db_password,
        'HOST': db_host,
        'PORT': db_port,
        'OPTIONS': {
            'init_command': 'SET sql_mode=STRICT_TRANS_TABLES',
        },
    }
}



# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = 'accounts.User'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (

    os.path.join(BASE_DIR, 'static'),
)


SendMail = "alertmail@2144.cn"
ops_mail = "huanghuajin@2144.cn"

#
SESSION_COOKIE_AGE=43200
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

'''django-crontab'''
CRONJOBS = [
    ('0 0 * * *','dnspod.jobs.CdnSync','>>/var/django-cron.log'),
    ('0 3 * * *','dnspod.jobs.dnspodSync','>>/var/django-dnspodSync.log'),
]


'''logging'''
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] - %(levelname)s - %(module)s - %(message)s',
        },
    },
    'handlers': {
        'file_error': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '{0}/logs/dnsmanage_error.log'.format(BASE_DIR),
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': '{0}/logs/dnsmanage.log'.format(BASE_DIR),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['file','console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'myproject': {
            'handlers': ['file','file_error'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
